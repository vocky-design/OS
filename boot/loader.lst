     1                                  %include "boot.inc"
     2                              <1> ;-----------------------loader-------------------------
     3                              <1> LOADER_START_SECTOR 	equ 0x2
     4                              <1> LOADER_BASE_ADDR 		equ 0x900
     5                              <1> 
     6                              <1> PAGE_DIR_TABLE_POS 		equ 0x100000
     7                              <1> 
     8                              <1> KERNEL_START_SECTOR		equ	0x9
     9                              <1> KERNEL_BIN_BASE_ADDR	equ 0x70000
    10                              <1> 
    11                              <1> KERNEL_ENTRY_POINT		equ	0xc0001500		;需要与ld的-Ttext参数一致。
    12                              <1> ;-----------------------gdt描述符属性------------------
    13                              <1> DESC_G_4K 			equ 		10000000_00000000_00000000b
    14                              <1> DESC_D_32 			equ  		 1000000_00000000_00000000b
    15                              <1> DESC_L_32 			equ   		  000000_00000000_00000000b
    16                              <1> DESC_AVL  			equ    		   00000_00000000_00000000b
    17                              <1> DESC_LIMIT_CODE2 	equ 			1111_00000000_00000000b
    18                              <1> DESC_LIMIT_DATA2 	equ				DESC_LIMIT_CODE2
    19                              <1> DESC_LIMIT_VIDEO2	equ				0000_00000000_00000000b
    20                              <1> DESC_P				equ				     10000000_00000000b
    21                              <1> DESC_DPL_0			equ					  0000000_00000000b
    22                              <1> DESC_DPL_1			equ					  0100000_00000000b
    23                              <1> DESC_DPL_2			equ					  1000000_00000000b
    24                              <1> DESC_DPL_3			equ					  1100000_00000000b
    25                              <1> DESC_S_CODE			equ						10000_00000000b
    26                              <1> DESC_S_DATA			equ						DESC_S_CODE
    27                              <1> DESC_S_SYS			equ						00000_00000000b
    28                              <1> DESC_TYPE_CODE		equ						 1000_00000000b
    29                              <1> DESC_TYPE_DATA      equ						 0010_00000000b
    30                              <1> ;;;;;; 
    31                              <1> DESC_CODE_HIGH4		equ (0x00<<24) + DESC_G_4K + DESC_D_32 + DESC_L_32 + DESC_AVL + 					DESC_LIMIT_CODE2 + DESC_P + DESC_DPL_0 + DESC_S_CODE + 					DESC_TYPE_CODE + 0X00
    32                              <1>                                                                                                                                                                                                                        
    33                              <1> DESC_DATA_HIGH4 	equ (0x00<<24) + DESC_G_4K + DESC_D_32 + DESC_L_32 + DESC_AVL + 					DESC_LIMIT_DATA2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + 					DESC_TYPE_DATA + 0x00
    34                              <1> 
    35                              <1> DESC_VIDEO_HIGH4 	equ (0x00<<24) + DESC_G_4K + DESC_D_32 + DESC_L_32 + DESC_AVL + 					DESC_LIMIT_VIDEO2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + 					DESC_TYPE_DATA + 0x00
    36                              <1> ;-----------------------选择子属性----------------------
    37                              <1> RPL0 	equ 	00b
    38                              <1> RPL1 	equ 	01b
    39                              <1> RPL2 	equ 	10b
    40                              <1> RPL3 	equ 	11b	
    41                              <1> TI_GDT	equ		0_00b
    42                              <1> TI_LDT	equ		1_00b	
    43                              <1> ;-----------------------页表相关属性--------------------
    44                              <1> PG_P	equ		1b
    45                              <1> PG_RW_R	equ		00b
    46                              <1> PG_RW_W	equ		10b
    47                              <1> PG_US_S equ		000b
    48                              <1> PG_US_U	equ		100b
    49                              <1> 
    50                              <1> ;-----------------------ELF文件分析---------------------
    51                              <1> PT_NULL	equ 	0
    52                              <1> 
    53                                  section loader vstart=LOADER_BASE_ADDR
    54                                  ;-------------构建gdt及其内部的描述符---------------
    55 00000000 00000000                	GDT_BASE: 			dd 0x00000000
    56 00000004 00000000                			  			dd 0x00000000
    57 00000008 FFFF0000                	CODE_DESC:			dd 0x0000ffff
    58 0000000C 0098CF00                						dd DESC_CODE_HIGH4
    59 00000010 FFFF0000                	DATA_STACK_DESC:	dd 0x0000ffff
    60 00000014 0092CF00                						dd DESC_DATA_HIGH4
    61 00000018 07000080                	VIDEO_DESC:			dd 0x80000007			;(0xbffff-0xb8000)/4k=0x7
    62 0000001C 0092C000                						dd DESC_VIDEO_HIGH4
    63                                  
    64                                  	GDT_SIZE 	equ $-GDT_BASE
    65                                  	GDT_LIMIT	equ GDT_SIZE-1
    66                                  
    67 00000020 0000000000000000-       	times 60 dq 0 ;此处预留60个描述符的空位
    68 00000020 <rept>             
    69                                  
    70 00000200 00000000                	total_mem_bytes dd 0		;这块地址是0xb00,0x900+(60+4)*8=0xb00
    71                                  
    72                                  	SELECTOR_CODE 	equ (0x0001<<3) + TI_GDT + RPL0
    73                                  	SELECTOR_DATA 	equ (0x0002<<3) + TI_GDT + RPL0
    74                                  	SELECTOR_VIDEO	equ (0x0003<<3) + TI_GDT + RPL0
    75                                  
    76 00000204 1F00                    	gdt_ptr dw GDT_LIMIT
    77 00000206 [00000000]              			dd GDT_BASE
    78                                  
    79 0000020A 00<rept>                	ards_buf times 244 db 0
    80 000002FE 0000                    	ards_nr dw 0
    81                                  
    82                                  loader_start:
    83 00000300 BC0009                  	mov sp,LOADER_BASE_ADDR
    84                                  ;打印"in loader"
    85 00000303 65C606A00069            	mov byte [gs:160],'i'
    86 00000309 65C606A100A4            	mov byte [gs:161],0xa4
    87                                  
    88 0000030F 65C606A2006E            	mov byte [gs:162],'n'
    89 00000315 65C606A300A4            	mov byte [gs:163],0xa4
    90                                  
    91 0000031B 65C606A40020            	mov byte [gs:164],' '
    92 00000321 65C606A500A4            	mov byte [gs:165],0xa4
    93                                  
    94 00000327 65C606A6006C            	mov byte [gs:166],'l'
    95 0000032D 65C606A700A4            	mov byte [gs:167],0xa4
    96                                  
    97 00000333 65C606A8006F            	mov byte [gs:168],'o'
    98 00000339 65C606A900A4            	mov byte [gs:169],0xa4
    99                                  
   100 0000033F 65C606AA0061            	mov byte [gs:170],'a'
   101 00000345 65C606AB00A4            	mov byte [gs:171],0xa4
   102                                  
   103 0000034B 65C606AC0064            	mov byte [gs:172],'d'
   104 00000351 65C606AD00A4            	mov byte [gs:173],0xa4
   105                                  
   106 00000357 65C606AE0065            	mov byte [gs:174],'e'
   107 0000035D 65C606AF00A4            	mov byte [gs:175],0xa4
   108                                  
   109 00000363 65C606B00072            	mov byte [gs:176],'r'
   110 00000369 65C606B100A4            	mov byte [gs:177],0xa4
   111                                  ;--------------------利用BIOS中断0x15获取物理内存容量-----
   112                                  ;1.子功能号:0xe820
   113                                  		;---------获取所有ards----------
   114 0000036F 6631DB                  	xor ebx,ebx
   115 00000372 66BA50414D53            	mov edx,0x534d4150
   116 00000378 BF[0A02]                	mov di,ards_buf
   117                                  .e820_mem_get_loop:
   118 0000037B 66B914000000            	mov ecx,20
   119 00000381 66B820E80000            	mov eax,0xe820
   120 00000387 CD15                    	int 0x15
   121 00000389 7232                    	jc .e820_failed_so_try_e801
   122 0000038B 01CF                    	add di,cx
   123 0000038D FF06[FE02]              	inc word [ards_nr]
   124 00000391 6683FB00                	cmp ebx,0
   125 00000395 75E4                    	jnz .e820_mem_get_loop
   126                                  		;----------分析返回-------------
   127 00000397 8B0E[FE02]              	mov cx,[ards_nr]
   128 0000039B 66BB[0A020000]          	mov ebx,ards_buf
   129 000003A1 6631D2                  	xor edx,edx
   130                                  .find_max_mem_area:
   131 000003A4 66678B03                	mov eax,[ebx]
   132 000003A8 6667034308              	add eax,[ebx+8]
   133 000003AD 6683C314                	add ebx,20
   134 000003B1 6639D0                  	cmp eax,edx
   135 000003B4 7C03                    	jl .next_ards
   136 000003B6 6689C2                  	mov edx,eax
   137                                  .next_ards:
   138 000003B9 E2E9                    	loop .find_max_mem_area
   139 000003BB EB52                    	jmp .mem_get_ok
   140                                  
   141                                  ;2.子功能号:0xe801
   142                                  .e820_failed_so_try_e801:
   143 000003BD B801E8                  	mov ax,0xe801
   144 000003C0 CD15                    	int 0x15
   145 000003C2 7232                    	jc .e801_failed_so_try_88
   146                                  	
   147 000003C4 B90004                  	mov cx,0x400
   148 000003C7 F7E1                    	mul cx
   149 000003C9 66C1E210                	shl edx,16
   150 000003CD 6625FFFF0000            	and eax,0x0000ffff
   151 000003D3 6609C2                  	or  edx,eax
   152 000003D6 6681C200001000          	add edx,0x100000
   153 000003DD 6689D6                  	mov esi,edx
   154                                  
   155 000003E0 6631C0                  	xor eax,eax
   156 000003E3 89D8                    	mov ax,bx
   157 000003E5 66B900000100            	mov ecx,0x10000
   158 000003EB 66F7E1                  	mul ecx
   159 000003EE 6601C6                  	add esi,eax
   160                                  
   161 000003F1 6689F2                  	mov edx,esi
   162 000003F4 EB19                    	jmp .mem_get_ok
   163                                  	
   164                                  ;3.子功能号:0xe88
   165                                  .e801_failed_so_try_88:
   166 000003F6 B488                    	mov ah,0x88
   167 000003F8 CD15                    	int 0x15
   168 000003FA 7213                    	jc .error_halt
   169                                  	
   170 000003FC B90004                  	mov cx,0x400
   171 000003FF F7E1                    	mul cx
   172 00000401 66C1E210                	shl edx,16
   173 00000405 6609C2                  	or  edx,eax
   174 00000408 6681C200001000          	add edx,0x100000
   175                                  .error_halt:
   176                                  	;之后写一个输出
   177                                  .mem_get_ok:
   178 0000040F 668916[0002]            	mov [total_mem_bytes],edx
   179                                  
   180                                  ;--------------------进入保护模式-----------------
   181                                  ;1.打开A20GATE
   182                                  ;2.加载gdt
   183                                  ;3.将CR0的PE位置1
   184                                  		;-----------打开A20GATE------------
   185 00000414 E492                    	in al,0x92
   186 00000416 0C02                    	or al,0000_0010b
   187 00000418 E692                    	out 0x92,al
   188                                  		;-----------加载gdt----------------
   189 0000041A 0F0116[0402]            	lgdt [gdt_ptr]
   190                                  		;-----------将CR0寄存器的PE位置1---
   191 0000041F 0F20C0                  	mov eax,cr0
   192 00000422 6683C801                	or eax,0x00000001
   193 00000426 0F22C0                  	mov cr0,eax
   194                                  
   195 00000429 66EA[31040000]0800      	jmp dword SELECTOR_CODE:p_mode_start		;作用:1.清空流水线2.更新段描述符缓冲寄存器
   196                                  
   197                                  [bits 32]
   198                                  p_mode_start:
   199 00000431 66B81000                	mov ax,SELECTOR_DATA						;段选择子是16位的。
   200 00000435 8ED8                    	mov ds,ax
   201 00000437 8EC0                    	mov es,ax
   202 00000439 8ED0                    	mov ss,ax                                           
   203 0000043B BC00090000              	mov esp,LOADER_BASE_ADDR
   204 00000440 66B81800                	mov ax,SELECTOR_VIDEO
   205 00000444 8EE8                    	mov gs,ax
   206                                  
   207                                  	;打印"P"
   208 00000446 65C605F000000050        	mov byte [gs:240],'P'
   209 0000044E 65C605F1000000A4        	mov byte [gs:241],0xa4
   210                                  
   211 00000456 B809000000              	mov eax,KERNEL_START_SECTOR
   212 0000045B BB00000700              	mov ebx,KERNEL_BIN_BASE_ADDR
   213 00000460 B1C8                    	mov cl,200
   214 00000462 E865000000              	call rd_disk_m_32
   215                                  
   216                                  ;----------------------------------------------------------
   217                                  ;--------------------开启分页机制------------------------------
   218                                  ;----------------------------------------------------------
   219                                  ;1.创建必要的PDE和PTE
   220 00000467 E8BF000000              	call setup_page
   221                                  	;准备好段访问的虚拟地址
   222 0000046C 0F0105[04020000]        	sgdt [gdt_ptr]
   223 00000473 8B1D[06020000]          	mov ebx,[gdt_ptr+2]
   224 00000479 814B1C000000C0          	or dword [ebx+8*3+4],0xc0000000		;将显存段映射到内核地址
   225 00000480 8103000000C0            	add dword [ebx],0xc0000000			;将gdt基址映射到内核地址
   226 00000486 81C4000000C0            	add esp,0xc0000000					;将栈指针映射到内核地址
   227                                  ;2.把页目录表地址赋值给cr3
   228 0000048C B800001000              	mov eax,PAGE_DIR_TABLE_POS
   229 00000491 0F22D8                  	mov cr3,eax
   230                                  ;3.打开cr0的pg位(第31位)
   231 00000494 0F20C0                  	mov eax,cr0
   232 00000497 0D00000080              	or eax,0x80000000
   233 0000049C 0F22C0                  	mov cr0,eax
   234                                  
   235                                  ;在开启分页后，用gdt新的地址重新加载
   236 0000049F 0F0115[04020000]        	lgdt [gdt_ptr]
   237 000004A6 EA[AD040000]0800        	jmp dword SELECTOR_CODE:enter_kernel		;作用:1.清空流水线2.更新段描述符缓冲寄存器
   238                                  enter_kernel:
   239                                  	;打印"4"
   240 000004AD 65C6054001000034        	mov byte [gs:320],'4'
   241 000004B5 65C60541010000A4        	mov byte [gs:321],0xa4
   242                                  
   243 000004BD E8E3000000              	call kernel_init
   244 000004C2 BC00F009C0              	mov esp,0xc009f000							;最高可用地址9fbff的4kb对齐	
   245                                  ;----------------------------------------------------------
   246                                  ;--------------------启动内核------------------------------
   247                                  ;----------------------------------------------------------
   248 000004C7 E9(001500C0)            	jmp KERNEL_ENTRY_POINT
   249                                  
   250                                  
   251                                  ;------------------------------------------------
   252                                  ;功能：读取硬盘n个扇区
   253                                  ;输入：eax,ebx,cl(不能超过255)
   254                                  rd_disk_m_32:
   255                                  ;------------------------------------------------
   256 000004CC 88CD                    	mov ch,cl
   257 000004CE 89C6                    	mov esi,eax
   258                                  ;第一步：设置要读取的扇区数
   259 000004D0 66BAF201                 	mov dx,0x1f2
   260 000004D4 88C8                    	mov al,cl   
   261 000004D6 EE                      	out dx,al
   262                                  
   263 000004D7 89F0                    	mov eax,esi
   264                                  
   265                                  ;第二步：将LBA地址存入0x1f3-0x1f6
   266 000004D9 66BAF301                	mov dx,0x1f3
   267 000004DD EE                      	out dx,al
   268                                  
   269 000004DE B108                    	mov cl,8
   270                                  
   271 000004E0 D3E8                    	shr eax,cl
   272 000004E2 66BAF401                	mov dx,0x1f4
   273 000004E6 EE                      	out dx,al
   274                                  
   275 000004E7 D3E8                    	shr eax,cl
   276 000004E9 66BAF501                	mov dx,0x1f5
   277 000004ED EE                      	out dx,al
   278                                  
   279 000004EE D3E8                    	shr eax,cl
   280 000004F0 240F                    	and al,0x0f
   281 000004F2 0CE0                    	or  al,0xe0				;设置7-4位为1110,表示lba模式,主盘。	
   282 000004F4 66BAF601                	mov dx,0x1f6				
   283 000004F8 EE                      	out dx,al
   284                                  ;第三步：向0x1f7端口写入读命令，0x20
   285 000004F9 66BAF701                	mov dx,0x1f7
   286 000004FD B020                    	mov al,0x20
   287 000004FF EE                      	out dx,al
   288                                  ;第四步：检测硬盘状态
   289                                  .not_ready:
   290 00000500 90                      	nop
   291 00000501 EC                      	in al,dx
   292 00000502 2488                    	and al,0x88
   293 00000504 3C08                    	cmp al,0x08
   294 00000506 75F8                    	jnz .not_ready
   295                                  ;第五步：从0x1f0端口读数据
   296 00000508 88E8                    	mov al,ch
   297 0000050A B400                    	mov ah,0
   298 0000050C 66BA0001                	mov dx,256					;每次读入2个字节，所以一个扇区512字节需要读次数512/2=256
   299 00000510 66F7E2                  	mul dx
   300                                  
   301 00000513 6689D1                  	mov cx,dx
   302 00000516 C1E110                  	shl ecx,16
   303 00000519 6689C1                  	mov cx,ax		
   304                                  		
   305 0000051C 66BAF001                	mov dx,0x1f0
   306                                  .on_read:
   307 00000520 66ED                    	in ax,dx
   308 00000522 668903                  	mov [ebx],ax
   309 00000525 83C302                  	add ebx,2
   310 00000528 E2F6                    	loop .on_read
   311                                  
   312 0000052A C3                      	ret
   313                                  
   314                                  ;------------------------------------------------
   315                                  ;功能：创建页目录表及页表
   316                                  ;输入：无
   317                                  setup_page:
   318                                  ;------------------------------------------------
   319                                  ;先把页目录表占用的空间清零
   320 0000052B B900100000              	mov ecx,4096								;1024*4=4096
   321 00000530 BE00000000              	mov esi,0
   322                                  .clear_page_dir:
   323 00000535 C6860000100000          	mov byte [PAGE_DIR_TABLE_POS+esi],0
   324 0000053C 46                      	inc esi
   325 0000053D E2F6                    	loop .clear_page_dir
   326                                  ;开始创建页目录项(PDE)
   327 0000053F B800001000              	mov eax,PAGE_DIR_TABLE_POS
   328 00000544 0500100000              	add eax,0x1000
   329 00000549 89C3                    	mov ebx,eax								;ebx is the head address of pte table.
   330                                  
   331 0000054B 83C805                  	or eax,PG_US_U|PG_RW_R|PG_P				;make selector
   332 0000054E A300001000              	mov [PAGE_DIR_TABLE_POS+0x000*4],eax
   333 00000553 A3000C1000              	mov [PAGE_DIR_TABLE_POS+0x300*4],eax
   334 00000558 2D00000100              	sub eax,0x10000
   335 0000055D A3FC0F1000              	mov [PAGE_DIR_TABLE_POS+0x3ff*4],eax
   336                                  ;下面创建低1MB的页表项(PTE)
   337 00000562 B900010000              	mov ecx,256								;1MB/4KB=256
   338 00000567 BE00000000              	mov esi,0
   339 0000056C BA05000000              	mov edx,PG_US_U|PG_RW_R|PG_P
   340                                  .create_pte:
   341 00000571 8914B3                  	mov [ebx+esi*4],edx
   342 00000574 81C200100000            	add edx,0x1000							;0x1000:4kb
   343 0000057A 46                      	inc esi
   344 0000057B E2F4                    	loop .create_pte
   345                                  ;创建虚拟地址内核区其他页表的PDE
   346 0000057D B800001000              	mov eax,PAGE_DIR_TABLE_POS
   347 00000582 0500200000              	add eax,0x1000*2						;the address of second pte table
   348 00000587 83C805                  	or 	eax,PG_US_U|PG_RW_R|PG_P
   349 0000058A BB00001000              	mov ebx,PAGE_DIR_TABLE_POS
   350 0000058F B9FE000000              	mov ecx,256-2					;范围为第769-1022的所有目录项数量，768和1023有特别用途。
   351 00000594 BE01030000              	mov esi,769
   352                                  .create_kernel_pde:
   353 00000599 8904B3                  	mov [ebx+esi*4],eax
   354 0000059C 0500100000              	add eax,0x1000
   355 000005A1 46                      	inc esi
   356 000005A2 E2F5                    	loop .create_kernel_pde
   357                                  
   358 000005A4 C3                      	ret
   359                                  
   360                                  ;------------------------------------------------
   361                                  ;功能：将kernel.bin中的segment拷贝到编译的地址
   362                                  ;输入：无
   363                                  kernel_init:
   364                                  ;------------------------------------------------
   365 000005A5 31C0                    	xor eax,eax
   366 000005A7 31DB                    	xor ebx,ebx			;ebx记录程序头表地址
   367 000005A9 31C9                    	xor ecx,ecx			;cx记录程序头表中的program header大小
   368 000005AB 31D2                    	xor edx,edx			;dx记录program header尺寸
   369                                  
   370 000005AD 668B152A000700          	mov dx,[KERNEL_BIN_BASE_ADDR + 42]
   371 000005B4 8B1D1C000700            	mov ebx,[KERNEL_BIN_BASE_ADDR + 28]
   372 000005BA 81C300000700            	add ebx,KERNEL_BIN_BASE_ADDR
   373 000005C0 B900000000              	mov ecx,0
   374 000005C5 668B0D2C000700          	mov cx,[KERNEL_BIN_BASE_ADDR + 44]
   375                                  
   376                                  .each_segment:
   377 000005CC 803B00                  	cmp byte [ebx],PT_NULL
   378 000005CF 7417                    	je .PTNULL
   379                                  ;为函数mem_cpy(dst,src,size)压入参数
   380 000005D1 FF7310                  	push dword [ebx + 16]
   381 000005D4 8B4304                  	mov eax,[ebx + 4]
   382 000005D7 0500000700              	add eax,KERNEL_BIN_BASE_ADDR
   383 000005DC 50                      	push eax
   384 000005DD FF7308                  	push dword [ebx + 8]			;p_vaddr,这就是目的地址。
   385 000005E0 E808000000              	call mem_cpy
   386 000005E5 83C40C                  	add esp,12
   387                                  .PTNULL:
   388 000005E8 01D3                    	add ebx,edx
   389 000005EA E2E0                    	loop .each_segment
   390 000005EC C3                      	ret
   391                                  ;---------------------------------------------------------
   392                                  mem_cpy:
   393 000005ED FC                      	cld
   394 000005EE 55                      	push ebp
   395 000005EF 89E5                    	mov ebp,esp
   396 000005F1 51                      	push ecx
   397                                  	
   398 000005F2 8B7D08                  	mov edi,[ebp+8]
   399 000005F5 8B750C                  	mov esi,[ebp+12]
   400 000005F8 8B4D10                  	mov ecx,[ebp+16]
   401 000005FB F3A4                    	rep movsb
   402                                  
   403                                  	;恢复环境
   404 000005FD 59                      	pop ecx
   405 000005FE 5D                      	pop ebp
   406 000005FF C3                      	ret
